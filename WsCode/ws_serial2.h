/*******************************************************************************
* FILE NAME: ifi_utilities.h
*
* DESCRIPTION: 
*  This is the include file which corresponds to ifi_utilities.c
*  It contains some aliases and function prototypes used in that file.
*
* USAGE:
*  This file should not be modified by the user.
*  DO NOT EDIT THIS FILE!
*******************************************************************************/

#ifndef __WS_SERIAL2_H_
#define __WS_SERIAL2_H_

/* Stolen from ifi_utilities.h for serial port 2 */
#define RXINTF2              PIR3bits.RC2IF /* This bit indicates an RX byte recv */
#define RXINTE2              PIE3bits.RC2IE
#define TXINTF2              PIR3bits.TX2IF /* This bit indicates TX complete */
#define TXINTE2              PIE3bits.TX2IE
#define RCSTA2bits           RCSTA2bits
#define RCSTA2               RCSTA2
#define TXSTA2               TXSTA2
#define TXREG2               TXREG2
#define RCREG2               RCREG2
#define SPBRG2               SPBRG2

#ifndef CYGWIN_IFI_SIMULATOR
  /* Real target build */
  #define WRITE_TO_TX2(data) TXREG2 = data
  #define WRITE_TO_TX1(data) TXREG1 = data
  /*#define RECV_FROM_RX2()    RCREG2*/  /* RXREG2 has the last RX byte received */
  #define RECV_FROM_RX2()    Read2USART()  /* RXREG2 has the last RX byte received */

#else
  /* Simulator build */
  #define WRITE_TO_TX2(data) write_serial2(data)
  #define RECV_FROM_RX2()    recv_from_serial2()

#endif

/*******************************************************************************/
/*                         GLOBAL VARIABLES                                    */
/*******************************************************************************/
#define SIZE_RX1_BUFFER 10
#define RX1_RCSTA1_ERROR_MASK 0x06

#define SIZE_RX2_BUFFER 10
#define RX2_RCSTA2_ERROR_MASK 0x06

/* These variables are all used by the Serial USART receiver.  When the RX interrupt
 * goes off, the interrupt will write the data to the rx_buffer and update the
 * rx1_buffer_head pointer.  The reader should check to see if the head and tail match,
 * and if they do, there is no new data available.  If they are different, read the byte 
 * at the tail and update the tail to point the next byte.  
 */
#ifdef RX_BUFFERS_ALLOCATE
/* One file needs to define RX_BUFFERS_ALLOCATE to cause these variable to be
 * actually instantiated.  All other files will only see these as an extern
 */

/* UART1 */
volatile unsigned char  s_rx1_buffer[SIZE_RX1_BUFFER];  /* Ring of RX bytes received */
volatile unsigned char* sp_rx1_buffer_head=&(s_rx1_buffer[0]); /* insert to head */
volatile unsigned char* sp_rx1_buffer_tail=&(s_rx1_buffer[0]); /* remove from tail */
volatile int            s_rx1_errors=0;
/* UART2 */
volatile unsigned char  s_rx2_buffer[SIZE_RX2_BUFFER];
volatile unsigned char* sp_rx2_buffer_head=&(s_rx2_buffer[0]); /* insert to head */
volatile unsigned char* sp_rx2_buffer_tail=&(s_rx2_buffer[0]); /* remove from tail */
volatile int            s_rx2_errors=0;
#else
/* UART1 */
extern volatile unsigned char  s_rx1_buffer[SIZE_RX1_BUFFER];/*Ring of RX bytes received*/
extern volatile unsigned char* sp_rx1_buffer_head; /* insert to head */
extern volatile unsigned char* sp_rx1_buffer_tail; /* remove from tail */
extern volatile int            s_rx1_errors;
/* UART2 */
extern volatile unsigned char  s_rx2_buffer[SIZE_RX2_BUFFER];
extern volatile unsigned char* sp_rx2_buffer_head; /* insert to head */
extern volatile unsigned char* sp_rx2_buffer_tail; /* remove from tail */
extern volatile int            s_rx2_errors;
#endif

/*******************************************************************************
                           FUNCTION PROTOTYPES
*******************************************************************************/

/* Initialize serial port 2 */
void Initialize_Serial_Comms2 (void);

/* This func will covert from byte to 3 ASCII bytes */
void Hex_output2(unsigned char temp);

void Wait4TXEmpty2(void);
#define Wait4TXEmpty1 Wait4TXEmpty

/* These funcs will print a byte/word/buffer as ASCII data */
void PrintByte2(unsigned char odata);
void PrintWord2(unsigned int odata);
void DisplayBufr2(unsigned char *bufr);

/* These funcs will send data out the serial port in raw format (no ASCII conversion) */
void PrintString2(char *bufr);
void SendSerialByte1(unsigned char data);
void SendSerialByte2(unsigned char data);

void Initialize_Serial_Comms2 (void);
int GetRxByte1(unsigned char* p_rx_byte);
int GetRxByte2(unsigned char* p_rx_byte);

void ClearRxBuffer1(void);  /* Clear all the RX bytes from the serial1 recv buffer */
void ClearRxBuffer2(void);  /* Clear all the RX bytes from the serial2 recv buffer */

#endif


/******************************************************************************/
/******************************************************************************/
/******************************************************************************/
